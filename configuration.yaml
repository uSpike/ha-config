homeassistant:
  # Name of the location where Home Assistant is running
  name: Home
  # Location required to calculate the time the sun rises and sets
  latitude: !secret home_latitude
  longitude: !secret home_longitude
  # Impacts weather/sunrise data (altitude above sea level in meters)
  elevation: !secret home_elevation
  # metric for Metric, imperial for Imperial
  unit_system: imperial
  time_zone: !secret time_zone
  # Customization file
  auth_mfa_modules:
    - type: totp
  customize:
    binary_sensor.garage_tilt_sensor:
      device_class: door
  auth_providers:
    - type: homeassistant
    - type: trusted_networks
      trusted_networks:
        - 192.168.1.0/24
  packages: !include_dir_named packages

zone:
  - name: Home
    latitude: !secret home_latitude
    longitude: !secret home_longitude
    icon: mdi:home

  - name: XES
    latitude: !secret xes_latitude
    longitude: !secret xes_longitude
    radius: 250
    icon: mdi:briefcase

system_health:
updater:
  reporting: false
  include_used_components: false

hacs:
  token: !secret hacs_token

recorder:
  db_url: postgresql://@/ha
  purge_keep_days: 30
  include:
    domains:
      - sensor
      - binary_sensor
      - switch
      - light
      - media_player
      - device_tracker
      - person
      - zwave

history:
history_graph:
  lights:
    hours_to_show: 120
    entities:
      - light.livingroom
      - light.kitchen
      - light.basement
      - light.bedroom
      - light.front_door


sensor:
  - platform: template
    sensors:
      # Batteries
      front_door_battery:
        entity_id: zwave.front_door_lock
        value_template: "{{ states.zwave.front_door_lock.attributes.battery_level }}"
        friendly_name: 'Front Door Lock Battery'
        unit_of_measurement: '%'
      garage_door_battery:
        entity_id: zwave.garage_door_lock
        value_template: "{{ states.zwave.garage_door_lock.attributes.battery_level }}"
        friendly_name: 'Garage Door Lock Battery'
        unit_of_measurement: '%'
      basement_smoke_alarm_battery:
        entity_id: zwave.basement_fire_alarm
        friendly_name: 'Downstairs Smoke Alarm Battery'
        value_template: '{{ states.zwave.basement_fire_alarm.attributes.battery_level }}'
        icon_template: 'mdi:battery-outline'
        unit_of_measurement: '%'
      garage_tilt_sensor_battery:
        entity_id: zwave.garage_door_tilt_sensor
        friendly_name: 'Garage Tilt Sensor Battery'
        value_template: '{{ states.zwave.garage_door_tilt_sensor.attributes.battery_level }}'
        icon_template: 'mdi:battery-outline'
        unit_of_measurement: '%'
      bedroom_keypad_0_battery:
        entity_id: zwave.button_bedroom_0
        friendly_name: 'Bedroom Keypad 0 Battery'
        value_template: '{{ states.zwave.button_bedroom_0.attributes.battery_level }}'
        icon_template: 'mdi:battery-outline'
        unit_of_measurement: '%'
      bedroom_keypad_1_battery:
        entity_id: zwave.button_bedroom_1
        friendly_name: 'Bedroom Keypad 1 Battery'
        value_template: '{{ states.zwave.button_bedroom_1.attributes.battery_level }}'
        icon_template: 'mdi:battery-outline'
        unit_of_measurement: '%'
      bedroom_door_sensor_battery:
        entity_id: zwave.bedroom_sliding_door_sensor
        friendly_name: 'Bedroom Door Sensor Battery'
        value_template: '{{ states.zwave.bedroom_sliding_door_sensor.attributes.battery_level }}'
        icon_template: 'mdi:battery-outline'
        unit_of_measurement: '%'

      basement_smoke_alarm_status:
        friendly_name: 'Downstairs Smoke Alarm Status'
        value_template: >-
          {% if is_state("sensor.basement_fire_alarm_level", "255") and is_state("sensor.basement_fire_alarm_type", "1") %}
            smoke
          {% elif is_state("sensor.basement_fire_alarm_level", "255") and is_state("sensor.basement_fire_alarm_type", "2") %}
            carbon monoxide
          {% else %}
            idle
          {% endif %}
        icon_template: >-
          {% if is_state("sensor.basement_fire_alarm_level", "255") and is_state("sensor.basement_fire_alarm_type", "1") %}
            mdi:fire
          {% elif is_state("sensor.basement_fire_alarm_level", "255") and is_state("sensor.basement_fire_alarm_type", "2") %}
            mdi:cloud-outline
          {% else %}
            mdi:smoke-detector
          {% endif %}

binary_sensor:
  - platform: template
    sensors:
      bedroom_door_open:
        device_class: door
        value_template: "{{ is_state('sensor.bedroom_door_alarm_level', '255') }}"
        friendly_name: 'Bedroom Door'

http:
  server_host: 127.0.0.1
  base_url: https://ha.jkhome.network
  use_x_forwarded_for: true
  trusted_proxies: 127.0.0.1

frontend:
lovelace:

mobile_app:
device_tracker:
person:
map:


config:
logger:
  default: info
#  logs:
#    homeassistant.components.lifx.light: debug
sun:

zwave:
  config_path: /srv/homeassistant/config/open-zwave/config
  usb_path: /dev/ttyACM0
  autoheal: false
  polling_interval: 30000

roku:
  - host: 10.52.110.13


media_player:
  - platform: panasonic_viera
    host: 10.52.110.10
    broadcast_address: 10.52.110.255
    mac: 8c:c1:21:60:64:f0
    name: "Basement TV"

script:
  media_start:
    sequence:
      - service: light.turn_on
        data:
          entity_id: light.basement
          transition: 1
          brightness: 150
      - service: media_player.turn_on
        data:
          entity_id: media_player.basement_tv
      - delay: '00:00:05'
      - service: media_player.select_source
        data:
          entity_id: media_player.basement_receiver_main
          source: 'hdmi2'  # roku
      - delay: '00:00:20'
      - service: light.turn_on
        data:
          entity_id: light.basement
          transition: 10
          brightness: 3

  media_pause:
    alias: Media Pause
    sequence:
      - service: light.turn_on
        data:
          entity_id: light.basement
          transition: 2
          brightness: 255

  zwave_inovelli_led_color:
    alias: Change LED color on Inovelli Switch
    sequence:
      - service: zwave.set_config_parameter
        data_template:
          node_id: '{{ nodeid }}'
          parameter: 16
          size: 4
          value: >
            {% if color is number and color >= 0 and color <= 255 %}
              {% set hx = color %}
            {% elif color == "red" %}
              {% set hx = 1 %}
            {% elif color == "orange" %}
              {% set hx = 21 %}
            {% elif color == "green" %}
              {% set hx = 85 %}
            {% elif color == "blue" %}
              {% set hx = 170 %}
            {% elif color == "pink" %}
              {% set hx = 234 %}
            {% elif color == "yellow" %}
              {% set hx = 42 %}
            {% else %}
              {% set hx = 127 %}
            {% endif %}
            {% if level is number and level >= 0 and level <= 10 %}
              {% set lx = level %}
            {% else %}
              {% set lx = 10 %}
            {% endif %}
            {% if duration is number %}
              {% if duration >= 0 and duration <= 255 %}
                {% set dx = duration %}
              {% else %}
                {% set dx = 10 %}
              {% endif %}
            {% elif duration == "on" %}
              {% set dx = 255 %}
            {% else %}
              {% set dx = 10 %}
            {% endif %}
            {% if effect is number and effect >= 0 and effect <= 4 %}
              {% set ex = effect %}
            {% elif effect == "off" %}
              {% set ex = 0 %}
            {% elif effect == "solid" %}
              {% set ex = 1 %}
            {% elif effect == "fast_blink" %}
              {% set ex = 2 %}
            {% elif effect == "strobe" %}
              {% set ex = 2 %}
            {% elif effect == "slow_blink" %}
              {% set ex = 3 %}
            {% else %}
              {% set ex = 4 %}
            {% endif %}
            {{( (hx) + (lx * (2**8)) + (dx * (2**16)) + (ex * (2**24))) | int}}

input_boolean:
  vacation:
    name: Vacation Mode
    initial: off
    icon: mdi:hotel


automation: !include automations.yaml
